require('dotenv').config();
const fs = require('fs');
const { Octokit } = require('@octokit/rest');
const { getJoke } = require('./getJoke');
const { getGif } = require('./getGif');
const dayjs = require('dayjs');

async function run() {
  const joke = await getJoke();
  const gif = await getGif('programming meme') || '';
  const date = dayjs().format('YYYY-MM-DD');
  const content = `# Dev Joke Bot — Daily Giggle (${date})\n\n` +
    `> ${joke.replace(/` + "`" + `/g, "\\`")}\n\n` +
    (gif ? `![meme](${gif})\n\n` : '') +
    `---\n*Auto-generated by the Dev Joke Bot.*\n`;

  fs.writeFileSync('README.md', content, 'utf8');
  console.log('Local README.md written');

  const octokitToken = process.env.GITHUB_TOKEN || process.env.GH_TOKEN;
  if (!octokitToken) {
    console.log('No GITHUB_TOKEN found — skipping commit to remote');
    return;
  }

  const octokit = new Octokit({ auth: octokitToken });
  const owner = process.env.OWNER_GITHUB;
  const repo = process.env.REPO_NAME;
  if (!owner || !repo) {
    console.log('OWNER_GITHUB or REPO_NAME not set — skipping commit');
    return;
  }

  // Read file and commit
  const contentBase64 = Buffer.from(content, 'utf8').toString('base64');
  try {
    // get current README sha if exists
    let sha;
    try {
      const { data: existing } = await octokit.repos.getContent({ owner, repo, path: 'README.md' });
      sha = existing.sha;
    } catch (e) {
      // file might not exist yet
    }

    await octokit.repos.createOrUpdateFileContents({
      owner,
      repo,
      path: 'README.md',
      message: `chore: update README with daily joke (${date})`,
      content: contentBase64,
      sha
    });
    console.log('README.md committed to remote');
  } catch (e) {
    console.error('Failed to commit README:', e && e.message);
  }
}

run().catch(e => { console.error(e); process.exit(1); });
